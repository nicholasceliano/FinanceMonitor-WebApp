//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FinanceMonitor.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class FinanceMonitorEntities : DbContext
    {
        public FinanceMonitorEntities(string connectionString)
            : base(connectionString)
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Account> Accounts { get; set; }
        public DbSet<AccountType> AccountTypes { get; set; }
        public DbSet<ConnectionCredential> ConnectionCredentials { get; set; }
        public DbSet<ConnectionName> ConnectionNames { get; set; }
        public DbSet<refConnName_AccountType> refConnName_AccountType { get; set; }
        public DbSet<TotalAmountByAccount> TotalAmountByAccounts { get; set; }
        public DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<GetAllAccountsByUser_Result> GetAllAccountsByUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAccountsByUser_Result>("GetAllAccountsByUser", userIDParameter);
        }
    
        public virtual ObjectResult<GetConnectionCredentials_Result> GetConnectionCredentials(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConnectionCredentials_Result>("GetConnectionCredentials", accountIDParameter);
        }
    
        public virtual int InsertAmountForAccount(Nullable<int> accountID, Nullable<decimal> amount)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAmountForAccount", accountIDParameter, amountParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ValidateUserCredentials(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ValidateUserCredentials", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<GetConnNameAccTypeByAccID_Result> GetConnNameAccTypeByAccID(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConnNameAccTypeByAccID_Result>("GetConnNameAccTypeByAccID", accountIDParameter);
        }
    
        public virtual int UpdateUserPassword(Nullable<int> userID, string password, string key)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserPassword", userIDParameter, passwordParameter, keyParameter);
        }
    
        public virtual ObjectResult<CheckIfUserExistsByUsername_Result> CheckIfUserExistsByUsername(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckIfUserExistsByUsername_Result>("CheckIfUserExistsByUsername", usernameParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", userIDParameter);
        }
    
        public virtual int DeleteAccount(Nullable<int> accID)
        {
            var accIDParameter = accID.HasValue ?
                new ObjectParameter("AccID", accID) :
                new ObjectParameter("AccID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAccount", accIDParameter);
        }
    
        public virtual int UpdateAccountConnectionCredentials(Nullable<int> accountID, string loginUsername, string loginPassword, string key)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var loginUsernameParameter = loginUsername != null ?
                new ObjectParameter("LoginUsername", loginUsername) :
                new ObjectParameter("LoginUsername", typeof(string));
    
            var loginPasswordParameter = loginPassword != null ?
                new ObjectParameter("LoginPassword", loginPassword) :
                new ObjectParameter("LoginPassword", typeof(string));
    
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAccountConnectionCredentials", accountIDParameter, loginUsernameParameter, loginPasswordParameter, keyParameter);
        }
    
        public virtual int CreateAccount(Nullable<int> userID, Nullable<int> connNameID, Nullable<int> accountTypeiD)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var connNameIDParameter = connNameID.HasValue ?
                new ObjectParameter("ConnNameID", connNameID) :
                new ObjectParameter("ConnNameID", typeof(int));
    
            var accountTypeiDParameter = accountTypeiD.HasValue ?
                new ObjectParameter("AccountTypeiD", accountTypeiD) :
                new ObjectParameter("AccountTypeiD", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateAccount", userIDParameter, connNameIDParameter, accountTypeiDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateAccount_ConnCredentials_Return(Nullable<int> userID, Nullable<int> connNameID, Nullable<int> accountTypeiD)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var connNameIDParameter = connNameID.HasValue ?
                new ObjectParameter("ConnNameID", connNameID) :
                new ObjectParameter("ConnNameID", typeof(int));
    
            var accountTypeiDParameter = accountTypeiD.HasValue ?
                new ObjectParameter("AccountTypeiD", accountTypeiD) :
                new ObjectParameter("AccountTypeiD", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateAccount_ConnCredentials_Return", userIDParameter, connNameIDParameter, accountTypeiDParameter);
        }
    
        public virtual ObjectResult<GetAllPossibleAccounts_Result> GetAllPossibleAccounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPossibleAccounts_Result>("GetAllPossibleAccounts");
        }
    
        public virtual ObjectResult<Nullable<decimal>> CreateUser(string username, string password, string key, string firstName, string lastName)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CreateUser", usernameParameter, passwordParameter, keyParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual ObjectResult<GetAccountValuesByUserAndTimeframe_Result> GetAccountValuesByUserAndTimeframe(Nullable<int> userID, string timeFrame)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var timeFrameParameter = timeFrame != null ?
                new ObjectParameter("TimeFrame", timeFrame) :
                new ObjectParameter("TimeFrame", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountValuesByUserAndTimeframe_Result>("GetAccountValuesByUserAndTimeframe", userIDParameter, timeFrameParameter);
        }
    }
}
